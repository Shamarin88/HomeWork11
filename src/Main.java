import java.time.LocalDate;

public class Main {

    public static void main(String[] args) {

        System.out.println("Задание 1");

        int year = 400;
        checkYear1(year);
        checkYear2(year);

        System.out.println("Задание 2");

        int typeOS = 1;
        int deviceYear = LocalDate.now().getYear();
        setParameters(typeOS, deviceYear);

        System.out.println("Задание 3");

        int deliveryDistance = 95;
        int deliveryTime = 1;
        int deliveryTime2 = 2;
        int deliveryTime3 = 3;
        calculationDelivery(deliveryDistance, deliveryTime, deliveryTime2, deliveryTime3);
    }
    // Задание 1
    // Реализуйте метод, который получает в качестве параметра год, а затем проверяет,
    // является ли он високосным, и выводит результат в консоль.
    // *Эту проверку вы уже реализовывали взадании по условным операторам.*
    // Теперь проверку нужно обернуть в метод и использовать год, который приходит в виде параметра.
    // Результат программы выведите в консоль. Если год високосный, то должно быть выведено
    // “*номер года —* високосный год”. Если год не високосный, то, соответственно:
    // “*номер года —* не **високосный год”.

    public static void checkYear1(int year) {
        if (year % 4 == 0 && year % 400 == 0) {
            System.out.println(year + " год является високосным");
        }
    }
    public static void checkYear2(int year) {
        if (year % 100 != 0) {
            System.out.println(year + " не год является високосным");
        }
    }
    public static void setParameters (int typeOS, int deviceYear) {

        // Задание 2
        // Вспомним задание 2 по условным операторам, где нам необходимо было предложить пользователю
        // облегченную версию приложения.
        // К нам пришли коллеги и сообщили, что нам нужно знать не только операционную систему телефона,
        // но и год его создания: от этого зависит, подойдет ли приложение для телефона или оно просто
        // не установится.
        // Если телефон произведен с 2015 по нынешний год, то приложение будет работать корректно.
        // Если телефон произведен ранее 2015 года, то клиенту нужно посоветовать установить облегченную
        // версию приложения.
        // Ваша задача: написать программу, которая выдает соответствующее сообщение клиенту при наличии
        // двух условий — операционной системы телефона (iOS или Android) и года производства.
        // Если год выпуска ранее 2015 года, то к сообщению об установке нужно добавить информацию об
        // облегченной версии.
        // Например, для iOS оно будет звучать так:
        // «Установите облегченную версию приложения для iOS по ссылке».
        // А для Android так:
        // «Установите облегченную версию приложения для Android по ссылке».
        // При этом для пользователей с телефоном с 2015 года выпуска нужно вывести обычное предложение
        // об установке приложения.
        // Для обозначения года создания используйте переменную clientDeviceYear, где необходимо указать
        // 2015 год.
        // **Важно**: вложенность больше двух этажей не допускается (условный оператор внутри условного
        // оператора).
        // Напишите метод, куда подаются два параметра: тип операционной системы (ОС)
        // ( 0 — iOS или 1 — Android) и год выпуска устройства.
        // Если устройство старше текущего года, предложите ему установить lite-версию (облегченную версию).
        // В результате программа должна выводить в консоль в зависимости от исходных данных,
        // какую версию приложения (обычную или lite) и для какой ОС (Android или iOS)
        // нужно установить пользователю.

        if (typeOS == 0 && deviceYear >= 2015) {
            System.out.println("Установите версию приложения для iOS по ссылке");
        } else if (typeOS != 0 && deviceYear >= 2015) {
            System.out.println("Установите версию приложения для Android по ссылке");
        }
        if (typeOS == 0 && deviceYear < 2015) {
            System.out.println("Установите облегченную версию приложения для iOS по ссылке");
        } else if (typeOS != 0 && deviceYear < 2015) {
            System.out.println("Установите облегченную версию приложения для Android по ссылке");
        }
    }
    public static void calculationDelivery(int deliveryDistance, int deliveryTime, int deliveryTime2, int deliveryTime3) {
        // Возвращаемся к любимой многими задаче на расчет дней доставки банковской
        // карты от банка.
        // Наша задача — доработать код, а именно написать метод, который на вход принимает
        // дистанцию и возвращает итоговое количество дней доставки.

        if (deliveryDistance < 20) {
            System.out.println("Потребуется дней: " + deliveryTime);
        } else if (deliveryDistance >= 20 && deliveryDistance < 60) {
            System.out.println("Потребуется дней: " + deliveryTime2);
        } else {
            System.out.println("Потребуется дней: " + deliveryTime3);
        }
    }
}



